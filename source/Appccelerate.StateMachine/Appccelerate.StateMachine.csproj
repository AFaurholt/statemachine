<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
  </PropertyGroup>

  <PropertyGroup>
    <Title>Appccelerate.StateMachine</Title>
    <Copyright>Copyright ©  2008-2019</Copyright>
    <Authors>Appccelerate team</Authors>
    <Company>Appccelerate</Company>
    <Product>Appccelerate</Product>
  </PropertyGroup>
  
  <!-- nuget package -->
  <PropertyGroup>
    <PackageRequireLicenseAcceptance>True</PackageRequireLicenseAcceptance>
    <PackageLicenseFile>LICENSE</PackageLicenseFile>
    <RepositoryUrl>https://github.com/appccelerate/statemachine</RepositoryUrl>
    <PackageIconUrl>https://github.com/appccelerate/appccelerate/raw/master/docs/nuget.png</PackageIconUrl>
    <description>
      Hierarchical state machine with fluent definition syntax
      Features:
      states and events can be defined with enums, strings or ints - resulting in single class state machines,
      actions on transitions, entry and exit actions, transition guards,
      hierarchical with different history behaviors to initialize state always to same state or last active state,
      fluent definition interface,
      synchronous/asynchronous state machine (passive state machine handles state transitions synchronously, active state machine handles state transitions asynchronously on the worker thread of the state machine),
      extensible thorough logging,
      state machine report for description of state machine (csv, yEd)
    </description>
    <PackageReleaseNotes>
      4.4.0:
      - back to .net standard 1.0
      - fixed nuget package containing wrong assembly

      4.0.0:
      - adds AsyncPassiveStateMachine that supports async/await for transition actions, entry/exit actions, guards and save/load.
      - targets .net standard 1.3 to support async/await

      3.3.0:
      - fixed: wrong target framework was specified in nuget package. Now targets .net standard 1.0

      3.2.0:
      - targets now .net standard 1.0 so you can use the state machine almost anywhere .net exists
      - fixed a bug when passing a 'null' argument to the state machine
    </PackageReleaseNotes>
    <PackageTags>Appccelerate state-machine</PackageTags>
  </PropertyGroup>

  <!-- nuget symbol package -->
  <PropertyGroup>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <!-- strong name signing -->
  <PropertyGroup>
    <SignAssembly>True</SignAssembly>
    <AssemblyOriginatorKeyFile>Appccelerate.snk</AssemblyOriginatorKeyFile>
    <DelaySign>False</DelaySign>
  </PropertyGroup>

  <!-- Stylecop / Analyzers -->
  <PropertyGroup>
    <CodeAnalysisRuleSet>../Analyzers.Productive.ruleset</CodeAnalysisRuleSet>
  </PropertyGroup>
  <ItemGroup>
    <None Remove="stylecop.json" />
  </ItemGroup>
  <ItemGroup>
    <AdditionalFiles Include="stylecop.json" />
  </ItemGroup>

  <!-- versioning -->
  <ItemGroup>
    <PackageReference Include="MinVer" Version="1.1.0">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <None Include="..\..\LICENSE" Pack="true" PackagePath=""/>
  </ItemGroup>

  <Import Project="..\Appccelerate.StateMachine.props" />

</Project>